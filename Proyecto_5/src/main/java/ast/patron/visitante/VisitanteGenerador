/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ast.patron.visitante;

import ast.Registros;
import ast.patron.compuesto.AddNodo;
import ast.patron.compuesto.AndNodoBinario;
import ast.patron.compuesto.AsigNodo;
import ast.patron.compuesto.BooleanoHoja;
import ast.patron.compuesto.CadenaHoja;
import ast.patron.compuesto.Compuesto;
import ast.patron.compuesto.DifNodo;
import ast.patron.compuesto.DiffNodoBinario;
import ast.patron.compuesto.DivEnteraNodoBinario;
import ast.patron.compuesto.DivNodoBinario;
import ast.patron.compuesto.EqualsNodoBinario;
import ast.patron.compuesto.GrNodoBinario;
import ast.patron.compuesto.GrqNodoBinario;
import ast.patron.compuesto.Hoja;
import ast.patron.compuesto.IdentifierHoja;
import ast.patron.compuesto.IfNodo;
import ast.patron.compuesto.IntHoja;
import ast.patron.compuesto.LeNodoBinario;
import ast.patron.compuesto.LeqNodoBinario;
import ast.patron.compuesto.ModuloNodoBinario;
import ast.patron.compuesto.Nodo;
import ast.patron.compuesto.NodoBinario;
import ast.patron.compuesto.NodoStmts;
import ast.patron.compuesto.NotNodo;
import ast.patron.compuesto.OrNodoBinario;
import ast.patron.compuesto.PorNodoBinario;
import ast.patron.compuesto.PotenciaNodoBinario;
import ast.patron.compuesto.PrintNodoBinario;
import ast.patron.compuesto.RealHoja;
import ast.patron.compuesto.WhileNodoBinario;

/**
 *
 * @author daniel
 */
public class VisistanteGenerador implements Visitor{
    
    Registros reg = new Registros();
            
void visit(AddNodo n);
    public void visit(AsigNodo n);
    public void visit(Compuesto n);
    
    public void visit(DifNodo n){
     Nodo hi = n.getPrimerHijo();
      Nodo hd = n.getUltimoHijo();

      // Tipo de registro objetivo
      int tipo = n.getType();
      boolean entero =  tipo==3 ? false : true;

      int objetivo = reg.getObjetivo(entero);
      String[] siguientes = reg.getNsiguientes(2,entero);

      // Genero el c칩digo del sub치rbol izquiero
      reg.setObjetivo(siguientes[0],entero);
      hi.accept(this);

      // Genero el c칩digo del sub치rbol derecho
      reg.setObjetivo(siguientes[1], entero);
      hd.accept(this);

      String opcode =  tipo==3 ? "sub.s" : "sub";

      System.out.println(opcode + " " + objetivo + ", " +
                          siguientes[0] + ", " + siguientes[1]);   
    }
    public void visit(Hoja n);
    public void visit(IdentifierHoja n);
    public void visit(IntHoja n);
    public void visit(Nodo n);
    public void visit(NodoBinario n);
    public void visit(NodoStmts n);
    public void visit(AndNodoBinario n);
    public void visit(DiffNodoBinario n);
    public void visit(DivEnteraNodoBinario n);
    public void visit(DivNodoBinario n);
    public void visit(EqualsNodoBinario n);
    public void visit(GrNodoBinario n);
    public void visit(GrqNodoBinario n);
    public void visit(LeNodoBinario n);
    public void visit(LeqNodoBinario n);
    public void visit(ModuloNodoBinario n);
    public void visit(NotNodo n);
    public void visit(OrNodoBinario n);
    public void visit(PorNodoBinario n);
    public void visit(PotenciaNodoBinario n);
    public void visit(PrintNodoBinario n);    
    public void visit(WhileNodoBinario n);
    public void visit(IfNodo n);
    public void visit(BooleanoHoja n);
    public void visit(CadenaHoja n);
    public void visit(RealHoja n);
}
